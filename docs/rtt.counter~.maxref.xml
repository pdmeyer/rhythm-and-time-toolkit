<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--If you edit this file, please place it in a safe place since future exports will overwrite this
automatically generated reference file.-->
<c74object name="rtt.counter~">
    <metadatalist>
        <metadata name="author">Philip Meyer</metadata>
        <metadata name="tag">sequencing</metadata>
    </metadatalist>
    <attributelist>
        <attribute name="steps" get="1" set="1" size="1" type="float64">
            <digest>Number of steps to count. When <at>steps</at> is greater than the absolute value
                of <at>ceiling</at> minus <at>floor</at>, the counter wraps around. Also determines
                the subdivision when <at>subdivmode</at> is ‘polyrhythmic’.</digest>
        </attribute>
        <attribute name="floor" get="1" set="1" size="1" type="float64">
            <digest>Minimum step index</digest>
        </attribute>
        <attribute name="ceiling" get="1" set="1" size="1" type="float64">
            <digest>Maximum step index. If 0 (the default), the <at>steps</at> value is used.</digest>
        </attribute>
        <attribute name="infinite" get="1" set="1" size="1" type="float64">
            <digest>Ignores the <at>floor</at>, <at>step</at>, <at>ceiling</at>, and <at>direction</at>
                attributes, causing the object to count upward indefinitely. An impulse to the
                second inlet will reset this count.</digest>
        </attribute>
        <attribute name="countevery" get="1" set="1" size="1" type="float64">
            <digest>Number of events (impulses or changed values) to receive before incrementing the counter.</digest>
        </attribute>
        <attribute name="direction" get="1" set="1" size="1" type="float64">
            <digest>Sets the behavior of the first outlet’s the step counter.</digest>
        <attributelist>
            <attribute name="default" get="1" set="1" type="int" size="1" value="0" />
            <attribute name="enumvals" get="1" set="1" type="atom" size="6">
                <enumlist>
                    <enum name="forward">
                        <digest>
                            Count upward
                        </digest>
                        <description> The counter increments by one for each step, wrapping around
                            to the bottom when <at>steps</at> is reached. </description>
                    </enum>
                    <enum name="backward">
                        <digest>
                            Count downward
                        </digest>
                        <description> The counter decrements by one for each step, wrapping around
                            to the <at>steps</at> when <at>the bottom</at> is reached. </description>
                    </enum>
                    <enum name="pingpong">
                        <digest>
                            Alternate between upward and downward
                        </digest>
                        <description> The counter increments by one for each step, then, when <at>
                            steps</at> is reached, decrements by one each step to the bottom, then
                            repeats. </description>
                    </enum>
                    <enum name="random">
                        <digest>
                            Count randomly
                        </digest>
                        <description>
                            For each step, the counter is a random integer along the counter range.
                        </description>
                    </enum>
                    <enum name="drunk1">
                        <digest>
                            Count up or down
                        </digest>
                        <description>
                            For each step, there is an equal likelihood that the counter will
                            increment upward or downward. Overflow values wrap.
                        </description>
                    </enum>
                    <enum name="drunk2">
                        <digest>
                            Detect non-zero to zero transition
                        </digest>
                        <description> Count up, down, or stay the same Like drunk1, but the
                            likelihood of the counter incrementing, decrementing, or staying on the
                            same step is set by <at>drunk2minus</at> <at>drunk2equals</at> <at>
                            drunk2plus</at>. The values of each these three parameters are
                            considered using a weighted probability. </description>
                    </enum>
                </enumlist>
            </attribute>
            <attribute name="label" get="1" set="1" type="symbol" size="1" value="Count Direction" />
            <attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
        </attributelist>
        </attribute>
        <attribute name="drunk2plus" get="1" set="1" size="1" type="float64">
            <digest>Drunk2: Forward Probability</digest>
        </attribute>
        <attribute name="drunk2minus" get="1" set="1" size="1" type="float64">
            <digest>Drunk2: Backward Probability</digest>
        </attribute>
        <attribute name="drunk2equals" get="1" set="1" size="1" type="float64">
            <digest>Drunk2: Same Step Probability</digest>
        </attribute>
    </attributelist>
    <description>A version of <o>rtt.loop~</o> that works impulses and stepped signals instead of
        phasors. <o>rtt.counter~</o> will keep a running count of impulses it has received. It will
        also count whole-number changes in the value of stepped signals. Like <o>rtt.loop~</o>, it
        has several parameters that allow the counter to be constrained or resequenced.</description>
    <digest>Count and resequence impulses and steps</digest>
    <seealsolist>
        <seealsolist>
            <seealso name="rtt.loop~" />
        </seealsolist>
    </seealsolist>
</c74object>