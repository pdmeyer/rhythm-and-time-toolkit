<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--If you edit this file, please place it in a safe place since future exports will overwrite this automatically generated reference file.-->
<c74object name="rtt.blocks~">
<metadatalist>
<metadata name="author">Philip Meyer</metadata>
<metadata name="tag">sequence</metadata>
</metadatalist>
<methodlist>
<method name="message"><digest>message input</digest><description>message input</description></method>
<method name="in2">
    <digest>Block List</digest>
    <description>A list of integers to the second inlet tells <o>rtt.blocks~</o> how to subdivide an incoming phasor. The object will produce as many subdivisions as there are items in the list. The length of each subdivision is proportional to its corresponding number's proportion of the sum of all the values in the list. For example, the list 1 2 3, will generate three successive phasor ramps that are 1/6, 1/3, and 1/2 the length of the input phasor.</description>
</method>
</methodlist>
<attributelist>
<attribute name="syncupdate" get="1" set="1" size="1" type="float64">
<digest>When enabled, changes to parameters are deferred until the phasor wraps.</digest>
</attribute>
</attributelist>
<description>rtt.blocks~ divides a phasor signal into shorter phasors based on a list of integers passed into the second inlet. This object is inspired by the concept of the “container” from Alex Van Gils’ and Sam Tarakajian’s Nestup.</description>
<digest>Subdivide a phasor signal irregularly.</digest>
<seealsolist>
    <seealsolist>
        <seealso name="rtt.divs~" />
    </seealsolist>
</seealsolist>
</c74object>